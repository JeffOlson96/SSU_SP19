/* msr_table_20.h
 *
 * Model-specific registers selected from table 20 of 
 * Volume 4 of Intel's January 2019 Software Developers' Manual
 * (see https://software.intel.com/en-us/articles/intel-sdm).
 *
 * This file has been generated by generate-headers.py.
 * Probably best to make edits there.
 *
 * Columns are:  tag, name, address, table, scope and bitmask.
 */

#ifndef __APERF
#define __APERF
_MSR(IA32,APERF,0x0E8,20,thread,MASK_RANGE_64(63,0))
#endif  //__APERF

#ifndef __CLOCK_MODULATION
#define __CLOCK_MODULATION
_MSR(IA32,CLOCK_MODULATION,0x19A,20,thread,0x0)
#endif  //__CLOCK_MODULATION

#ifndef __ENERGY_PERF_BIAS
#define __ENERGY_PERF_BIAS
_MSR(IA32,ENERGY_PERF_BIAS,0x1B0,20,package,0x0)
#endif  //__ENERGY_PERF_BIAS

#ifndef __FIXED_CTR0
#define __FIXED_CTR0
_MSR(IA32,FIXED_CTR0,0x309,20,thread,0x0)
#endif  //__FIXED_CTR0

#ifndef __FIXED_CTR1
#define __FIXED_CTR1
_MSR(IA32,FIXED_CTR1,0x30A,20,thread,0x0)
#endif  //__FIXED_CTR1

#ifndef __FIXED_CTR2
#define __FIXED_CTR2
_MSR(IA32,FIXED_CTR2,0x30B,20,thread,0x0)
#endif  //__FIXED_CTR2

#ifndef __FIXED_CTR_CTRL
#define __FIXED_CTR_CTRL
_MSR(IA32,FIXED_CTR_CTRL,0x38D,20,thread,0x0)
#endif  //__FIXED_CTR_CTRL

#ifndef __MPERF
#define __MPERF
_MSR(IA32,MPERF,0x0E7,20,thread,MASK_RANGE_64(63,0))
#endif  //__MPERF

#ifndef __PACKAGE_THERM_INTERRUPT
#define __PACKAGE_THERM_INTERRUPT
_MSR(IA32,PACKAGE_THERM_INTERRUPT,0x1B2,20,package,0x0)
#endif  //__PACKAGE_THERM_INTERRUPT

#ifndef __PERF_CTL
#define __PERF_CTL
_MSR(IA32,PERF_CTL,0x199,20,thread,MASK_RANGE_64(32,32) | MASK_RANGE_64(15,0))
#endif  //__PERF_CTL

#ifndef __PERF_GLOBAL_CTRL
#define __PERF_GLOBAL_CTRL
_MSR(IA32,PERF_GLOBAL_CTRL,0x38F,20,thread,0x0)
#endif  //__PERF_GLOBAL_CTRL

#ifndef __PERF_STATUS
#define __PERF_STATUS
_MSR(MSR,PERF_STATUS,0x198,20,package,0x0)
#endif  //__PERF_STATUS

#ifndef __PKG_ENERGY_STATUS
#define __PKG_ENERGY_STATUS
_MSR(MSR,PKG_ENERGY_STATUS,0x611,20,package,MASK_RANGE_64(31,0))
#endif  //__PKG_ENERGY_STATUS

#ifndef __PKG_POWER_INFO
#define __PKG_POWER_INFO
_MSR(MSR,PKG_POWER_INFO,0x614,20,package,0x0)
#endif  //__PKG_POWER_INFO

#ifndef __PKG_POWER_LIMIT
#define __PKG_POWER_LIMIT
_MSR(MSR,PKG_POWER_LIMIT,0x610,20,package,0x0)
#endif  //__PKG_POWER_LIMIT

#ifndef __PMC0
#define __PMC0
_MSR(IA32,PMC0,0x0C1,20,thread,0x0)
#endif  //__PMC0

#ifndef __PMC1
#define __PMC1
_MSR(IA32,PMC1,0x0C2,20,thread,0x0)
#endif  //__PMC1

#ifndef __PMC2
#define __PMC2
_MSR(IA32,PMC2,0x0C3,20,thread,0x0)
#endif  //__PMC2

#ifndef __PMC3
#define __PMC3
_MSR(IA32,PMC3,0x0C4,20,thread,0x0)
#endif  //__PMC3

#ifndef __PP0_POWER_LIMIT
#define __PP0_POWER_LIMIT
_MSR(MSR,PP0_POWER_LIMIT,0x638,20,package,0x0)
#endif  //__PP0_POWER_LIMIT

#ifndef __THERM_INTERRUPT
#define __THERM_INTERRUPT
_MSR(IA32,THERM_INTERRUPT,0x19B,20,core,0x0)
#endif  //__THERM_INTERRUPT

#ifndef __TIME_STAMP_COUNTER
#define __TIME_STAMP_COUNTER
_MSR(IA32,TIME_STAMP_COUNTER,0x010,20,thread,0x0)
#endif  //__TIME_STAMP_COUNTER

#ifndef __PERFEVTSEL4
#define __PERFEVTSEL4
_MSR(IA32,PERFEVTSEL4,0x18A,20,thread,0x0)
#endif  //__PERFEVTSEL4

#ifndef __PERFEVTSEL5
#define __PERFEVTSEL5
_MSR(IA32,PERFEVTSEL5,0x18B,20,thread,0x0)
#endif  //__PERFEVTSEL5

#ifndef __PERFEVTSEL6
#define __PERFEVTSEL6
_MSR(IA32,PERFEVTSEL6,0x18C,20,thread,0x0)
#endif  //__PERFEVTSEL6

#ifndef __PERFEVTSEL7
#define __PERFEVTSEL7
_MSR(IA32,PERFEVTSEL7,0x18D,20,thread,0x0)
#endif  //__PERFEVTSEL7

#ifndef __PMC4
#define __PMC4
_MSR(IA32,PMC4,0x0C5,20,thread,0x0)
#endif  //__PMC4

#ifndef __PMC5
#define __PMC5
_MSR(IA32,PMC5,0x0C6,20,thread,0x0)
#endif  //__PMC5

#ifndef __PMC6
#define __PMC6
_MSR(IA32,PMC6,0x0C7,20,thread,0x0)
#endif  //__PMC6

#ifndef __PMC7
#define __PMC7
_MSR(IA32,PMC7,0x0C8,20,thread,0x0)
#endif  //__PMC7

